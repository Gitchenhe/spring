Java虚拟机具有一个堆,对是运行时数据区域,所有类实例和数组的内存均从此处分配
    JVM主要管理两种类型内存:堆和非堆,堆内存(Heap Memory)是在Java虚拟机启动时创建,非堆内存(Non-heap Memory)是在Java虚拟机启动时创建,非堆内存(Non-Heap Memory)就是在JVM堆之外的内存.
 简单来说,非堆内存包含方法区,JVM内部处理或化所需的内存(如JITCompiler,JUST-In-Timer Compiler,即使编译后的代码缓存),每个类结构(如运行时常量池,字段和方法数据),以及方法和构造方法所需要的代码.
    JAVA是我堆是一个运行时数据区.堆是由垃圾回收来负责的,堆的优势是可以动态分配内存大小,生存周期也不必事先告诉编译器,因为它是在运行时动态分配内存的,Java的垃圾收集器会自动收走这些不再使用的数据,但缺点是,由于要在运行时动态分配内存,存取速度较慢.
    栈的优势是,存取速度比堆要快,仅次于寄存器,栈数据可以共享,但缺点是存在栈中的数据大小与生存周期必须是确定的,缺乏灵活性,栈中主要存放一些基本类型的数据变量数据(int,short,long,byte,float,double,char)和对象句柄.
    虚拟机必须为每个被装载的类型维护一个常量池,常量池就是该类型所用到常量的一个有序集合,包括直接常量(String,Integer和float point常量)和对其它类型,字段和方法的符号引用.
    对String常量,它的值是在常量池中的.而JVM中的常量池在当中以表的形式存在的,对于String类型,有一张固定长度的CONSTANT_String_info表用来存储文字字符串值,注意:该表只存储文字